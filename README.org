
[[https://travis-ci.org/guicho271828/trivia][https://travis-ci.org/guicho271828/trivia.svg?branch=master]]

* Trivia : Trivial Pattern Matching Compiler

Trivia is a pattern matching compiler that separates /matcher/ and
/optimizer/. It was named after Optima, a pattern match compiler now
gaining the popularity.  In Optima, sophisticated patterns that cannot be
derived from the primitive patterns should be written by hacking the
internals, but this is not the case with Trivia.

Trivia comes with 2 optimizers:

+ =:trivial= optimizer :: runs no optimization, and returns the pattern as
     it is. Interestingly, experiments suggests the gap between Optima and
     =:trivial= is minimal, and not so slow. Trivially correct and reliable.
+ =:balland2006= optimizer :: Implements /Fusion/ , /Intersection/ and
     /Swapping/ optimization in (Balland 2006). Currently [[https://github.com/guicho271828/trivia.balland2006][hosted in a
     separate repository]].  Compared to Optima, achieved a performance
     improvements up to 80x speedup. All tests are passing, however there
     may be a hidden bug compared to =:trivial=.

Since now we have a trivial optimizer and fully functional pattern matcher,
the next version of the optimizer in Trivia can be implemented using
Trivia itself.

Detailed documentation is in [[https://github.com/guicho271828/trivia/wiki][github wiki]].

* Dependency & Testing

+ Level 0,1 : Alexandria only.
+ Level 2 : Additionally, lisp-namespace and closer-mop.

To run the tests with trivial optimizer, =(asdf:test-system :trivia)= .

In order to run the same test with =:balland2006= optimizer activated, run follows:

#+BEGIN_SRC lisp
;; $ git clone https://github.com/guicho271828/trivia.balland2006
;; $ git clone https://github.com/guicho271828/type-i

(asdf:test-system :trivia.balland2006.enabled)
#+END_SRC

To run the benchmark:

#+BEGIN_SRC lisp
(asdf:test-system :trivia.benchmark)
#+END_SRC
