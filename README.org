
[[https://travis-ci.org/guicho271828/trivia][https://travis-ci.org/guicho271828/trivia.svg?branch=master]]

* Trivia : Trivial Pattern Matching Compiler

Trivia is a pattern matching compiler that is *compatible with Optima*.
It share the same testing code with Optima and it acts as a
drop-in replacement. Therefore, for the usage, consult [[https://github.com/m2ym/optima][Optima's website.]]

#+BEGIN_SRC diff
(defpackage :playwithit
  (:use :cl 
-       :optima))
+       :trivia))
(in-package :playwithit)

(match '(something #(0 1 2))
  ((list a (string 0 _ b))
   (values a b)))
;; --> SOMETHING, 2
#+END_SRC

Pattern expansion by Trivia runs *[[https://github.com/guicho271828/trivia/wiki/Benchmarking-Results][faster than Optima]]*.

| runtime [sec]        | fibonacci | gomoku | string-match |
|----------------------+-----------+--------+--------------|
| optima               |      11.5 |   39.8 |         82.5 |
| trivia + balland2006 |    *9.68* | *37.4* |       *1.57* |

... and allows *much finer extension compared to Optima*. Trivia's =defpattern= is more
primitive, and in fact, it is able to implement the
predefined, unmodifiable pattern language in Optima within itself.

#+BEGIN_SRC lisp
(defpattern cons (a b)
  (with-gensyms (it)
    `(guard1 (,it :type cons) (consp ,it) (car ,it) ,a (cdr ,it) ,b)))
#+END_SRC

Detailed documentation is in [[https://github.com/guicho271828/trivia/wiki][github wiki]].

* Dependency & Testing

+ Level 0,1 : Alexandria only.
+ Level 2 : Additionally, lisp-namespace and closer-mop.

To run the tests with trivial optimizer, =(asdf:test-system :trivia)= .

In order to run the same test with =:balland2006= optimizer activated, run follows:

#+BEGIN_SRC lisp
;; $ git clone https://github.com/guicho271828/trivia.balland2006
;; $ git clone https://github.com/guicho271828/type-i

(asdf:test-system :trivia.balland2006.enabled)
#+END_SRC

To run the benchmark:

#+BEGIN_SRC lisp
(asdf:test-system :trivia.benchmark)
#+END_SRC
